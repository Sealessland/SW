// Generated by CIRCT firtool-1.62.0
// Standard header to adapt well known macros for register randomization.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_MEM_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_MEM_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

// Include register initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_REG_
    `define ENABLE_INITIAL_REG_
  `endif // not def ENABLE_INITIAL_REG_
`endif // not def SYNTHESIS

// Include rmemory initializers in init blocks unless synthesis is set
`ifndef SYNTHESIS
  `ifndef ENABLE_INITIAL_MEM_
    `define ENABLE_INITIAL_MEM_
  `endif // not def ENABLE_INITIAL_MEM_
`endif // not def SYNTHESIS

// VCS coverage exclude_file
module regs_32x32(	// @[src/main/RegFile.scala:18:19]
  input  [4:0]  R0_addr,
  input         R0_en,
                R0_clk,
  output [31:0] R0_data,
  input  [4:0]  R1_addr,
  input         R1_en,
                R1_clk,
  output [31:0] R1_data,
  input  [4:0]  W0_addr,
  input         W0_en,
                W0_clk,
  input  [31:0] W0_data
);

  reg [31:0] Memory[0:31];	// @[src/main/RegFile.scala:18:19]
  always @(posedge W0_clk) begin	// @[src/main/RegFile.scala:18:19]
    if (W0_en & 1'h1)	// @[src/main/RegFile.scala:18:19]
      Memory[W0_addr] <= W0_data;	// @[src/main/RegFile.scala:18:19]
  end // always @(posedge)
  `ifdef ENABLE_INITIAL_MEM_	// @[src/main/RegFile.scala:18:19]
    reg [31:0] _RANDOM_MEM;	// @[src/main/RegFile.scala:18:19]
    initial begin	// @[src/main/RegFile.scala:18:19]
      `INIT_RANDOM_PROLOG_	// @[src/main/RegFile.scala:18:19]
      `ifdef RANDOMIZE_MEM_INIT	// @[src/main/RegFile.scala:18:19]
        for (logic [5:0] i = 6'h0; i < 6'h20; i += 6'h1) begin
          _RANDOM_MEM = `RANDOM;	// @[src/main/RegFile.scala:18:19]
          Memory[i[4:0]] = _RANDOM_MEM;	// @[src/main/RegFile.scala:18:19]
        end	// @[src/main/RegFile.scala:18:19]
      `endif // RANDOMIZE_MEM_INIT
    end // initial
  `endif // ENABLE_INITIAL_MEM_
  assign R0_data = R0_en ? Memory[R0_addr] : 32'bx;	// @[src/main/RegFile.scala:18:19]
  assign R1_data = R1_en ? Memory[R1_addr] : 32'bx;	// @[src/main/RegFile.scala:18:19]
endmodule

module RegFile(	// @[src/main/RegFile.scala:16:7]
  input         clock,	// @[src/main/RegFile.scala:16:7]
                reset,	// @[src/main/RegFile.scala:16:7]
  input  [4:0]  io_raddr1,	// @[src/main/RegFile.scala:17:16]
                io_raddr2,	// @[src/main/RegFile.scala:17:16]
  output [31:0] io_rdata1,	// @[src/main/RegFile.scala:17:16]
                io_rdata2,	// @[src/main/RegFile.scala:17:16]
  input         io_wen,	// @[src/main/RegFile.scala:17:16]
  input  [4:0]  io_Waddr,	// @[src/main/RegFile.scala:17:16]
  input  [31:0] io_Wdata	// @[src/main/RegFile.scala:17:16]
);

  regs_32x32 regs_ext (	// @[src/main/RegFile.scala:18:19]
    .R0_addr (io_raddr2),
    .R0_en   (1'h1),	// @[src/main/RegFile.scala:16:7]
    .R0_clk  (clock),
    .R0_data (io_rdata2),
    .R1_addr (io_raddr1),
    .R1_en   (1'h1),	// @[src/main/RegFile.scala:16:7]
    .R1_clk  (clock),
    .R1_data (io_rdata1),
    .W0_addr (io_Waddr),
    .W0_en   (io_wen & (|io_Waddr)),	// @[src/main/RegFile.scala:21:{17,29}]
    .W0_clk  (clock),
    .W0_data (io_Wdata)
  );
endmodule

